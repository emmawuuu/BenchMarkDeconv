sc.eset <- ExpressionSet(assayData = count_matrix, phenoData = pheno_data)
featureNames(exprset) <- feature_names
sc.eset <- ExpressionSet(assayData = count_matrix, phenoData = pheno_data)
featureNames(sc.eset) <- feature_names
sc.eset <- ExpressionSet(assayData = count_matrix, phenoData = pheno_data)
sc.eset <- ExpressionSet(assayData = sc_count_matrix, phenoData = pheno_data)
featureNames(sc.eset) <- feature_names
RESULTS.BisqueRNA <- BisqueRNA::ReferenceBasedDecomposition(bulk.eset, sc.eset, markers=NULL, use.overlap=FALSE)$bulk.props
library(MuSiC)
sc_data <- readRDS("EMTABsce_healthy.rds")
`%notin%` <- function(x, y) !(x %in% y)
cell_types_to_remove <- c("unclassified", "unclassified endocrine", "co-expression")
sc_data_filtered <- sc_data[, colData(sc_data)$cellType %notin% cell_types_to_remove]
bulk_sim = bulk_construct(sc_data_filtered)
bulk_sim = bulk_construct(sc_data_filtered, clusters="clusters")
counts(sc_data)
head(sc_counts)
head(counts(sc_data))
head(counts(sc_data), n=5)
# Read in single cell and bulk data
sc_data <- readRDS("EMTABsce_healthy.rds")
head(counts(sc_data), n=5)
head(as.data.frame(counts(sc_data)), n=5)
rownames(count(sc_data))
# Read in single cell and bulk data
sc_data <- readRDS("EMTABsce_healthy.rds")
bulk_counts <- read.csv("bulk_counts.csv", row.names = 1)
dimnames(assay(sc_data)$coutns)
dimnames(assay(sc_data)$counts)
dimnames(bulk_counts)
sc_data
bulk_sim = MuSiC::bulk_construct(sc_data_filtered, clusters = 'cellType', samples = 'SubjectName')
# Load in single cell data
sc_data <- readRDS("EMTABsce_healthy.rds")
`%notin%` <- function(x, y) !(x %in% y)
cell_types_to_remove <- c("unclassified", "unclassified endocrine", "co-expression")
sc_data_filtered <- sc_data[, colData(sc_data)$cellType %notin% cell_types_to_remove]
bulk_sim = MuSiC::bulk_construct(sc_data_filtered, clusters = 'cellType', samples = 'SubjectName')
bulk_sim
bulk_counts_matrix <- as.matrix(bulk_counts$bulk.counts)
bulk_counts_matrix <- as.matrix(bulk_sim$bulk.counts)
write.csv(bulk_counts_matrix, "bulk_counts-MuSic.csv", row.names = TRUE)
# Read in single cell and bulk data
sc_data <- readRDS("EMTABsce_healthy.rds")
bulk_counts <- read.csv("bulk_counts-MuSic.csv", row.names = 1)
RESULTS.sim.MuSic <- MuSiC::music_prop(
bulk.mtx = t(bulk_counts),
sc.sce = sc_data,
clusters = 'cellType',
samples = 'sampleID'
)
# Read in single cell and bulk data
sc_data <- readRDS("XinT2Dsce.rds")
bulk_counts <- read.csv("bulk_counts-MuSic.csv", row.names = 1)
# Run MuSiC
library("MuSiC")
library("Biobase")
RESULTS.sim.MuSic <- MuSiC::music_prop(
bulk.mtx = t(bulk_counts),
sc.sce = sc_data,
clusters = 'cellType',
samples = 'sampleID'
)
# Load in single cell data
sc_data <- readRDS("EMTABsce_healthy.rds")
`%notin%` <- function(x, y) !(x %in% y)
cell_types_to_remove <- c("unclassified", "unclassified endocrine", "co-expression")
sc_data_filtered <- sc_data[, colData(sc_data)$cellType %notin% cell_types_to_remove]
bulk_sim = MuSiC::bulk_construct(sc_data_filtered, clusters = 'cellType', samples = 'SubjectName')
bulk_counts_matrix <- as.matrix(bulk_sim$bulk.counts)
bulk_sim$bulk.counts
bulk_data <- bulk_sim$bulk.counts
`%notin%` <- function(x, y) !(x %in% y)
cell_types_to_remove <- c("unclassified", "unclassified endocrine", "co-expression")
sc_data_filtered <- sc_data[, colData(sc_data)$cellType %notin% cell_types_to_remove]
# Load in single cell data
sc_data <- readRDS("EMTABsce_healthy.rds")
`%notin%` <- function(x, y) !(x %in% y)
cell_types_to_remove <- c("unclassified", "unclassified endocrine", "co-expression")
sc_data_filtered <- sc_data[, colData(sc_data)$cellType %notin% cell_types_to_remove]
sc_data_filtered
colData(sc_data_filtered$cellType)
colData(sc_data_filtered)$cellType
unique(colData(sc_data_filtered)$cellType)
# Read in single cell and bulk data
sc_data <- readRDS("EMTABsce_healthy.rds")
bulk_counts <- read.csv("bulk_counts-MuSic.csv", row.names = 1)
# Run MuSiC
library("MuSiC")
library("Biobase")
RESULTS.sim.MuSic <- MuSiC::music_prop(
bulk.mtx = t(bulk_counts),
sc.sce = sc_data,
clusters = 'cellType',
samples = 'sampleID',
select.ct = c("delta","alpha","gamma","ductal","acinar","beta","MHC class II", "PSC","endothelial","epsilon","mast")
)
bulk_counts <- read.csv("bulk_counts.csv", row.names = 1)
# Run MuSiC
library("MuSiC")
library("Biobase")
RESULTS.sim.MuSic <- MuSiC::music_prop(
bulk.mtx = t(bulk_counts),
sc.sce = sc_data,
clusters = 'cellType',
samples = 'sampleID',
select.ct = c("delta","alpha","gamma","ductal","acinar","beta","MHC class II", "PSC","endothelial","epsilon","mast")
)
# Load in single cell data
sc_data <- readRDS("XinT2Dsce.rds")
`%notin%` <- function(x, y) !(x %in% y)
cell_types_to_remove <- c("unclassified", "unclassified endocrine", "co-expression")
sc_data_filtered <- sc_data[, colData(sc_data)$cellType %notin% cell_types_to_remove]
bulk_sim = MuSiC::bulk_construct(sc_data_filtered, clusters = 'cellType', samples = 'SubjectName')
bulk_counts_matrix <- as.matrix(bulk_sim$bulk.counts)
write.csv(bulk_counts_matrix, "bulk_counts-MuSic-Xin.csv", row.names = TRUE)
# Read in single cell and bulk data
sc_data <- readRDS("EMTABsce_healthy.rds")
bulk_counts <- read.csv("bulk_counts-MuSic-Xin.csv", row.names = 1)
# Run MuSiC
library("MuSiC")
library("Biobase")
RESULTS.sim.MuSic <- MuSiC::music_prop(
bulk.mtx = t(bulk_counts),
sc.sce = sc_data,
clusters = 'cellType',
samples = 'sampleID'
)
RESULTS.sim.MuSic <- MuSiC::music_prop(
bulk.mtx = bulk_counts,
sc.sce = sc_data,
clusters = 'cellType',
samples = 'sampleID'
)
sc_data <- readRDS("XinT2Dsce.rds")
`%notin%` <- function(x, y) !(x %in% y)
cell_types_to_remove <- c("unclassified", "unclassified endocrine", "co-expression")
sc_data_filtered <- sc_data[, colData(sc_data)$cellType %notin% cell_types_to_remove]
bulk_sim = MuSiC::bulk_construct(sc_data_filtered, clusters = 'cellType', samples = 'SubjectName')
bulk_counts_matrix <- as.matrix(bulk_sim$bulk.counts)
# Read in single cell and bulk data
sc_data <- readRDS("EMTABsce_healthy.rds")
RESULTS.sim.MuSic <- MuSiC::music_prop(
bulk.mtx = bulk_counts_matrix,
sc.sce = sc_data,
clusters = 'cellType',
samples = 'sampleID'
)
# Load in single cell data
sc_data <- readRDS("EMTABsce_healthy.rds")
`%notin%` <- function(x, y) !(x %in% y)
cell_types_to_remove <- c("unclassified", "unclassified endocrine", "co-expression")
sc_data_filtered <- sc_data[, colData(sc_data)$cellType %notin% cell_types_to_remove]
# Normalize the single-cell data using TPM normalization
sc_data_tpm <- counts(sc_data_filtered) %>%
t() %>%
as.data.frame() %>%
apply(2, function(x) exp(x - log(sum(exp(x))))) %>%
t() %>%
as.matrix()
# Estimate cell type proportions
cell_type <- colData(sc_data_filtered)$cellType
cell_type_prop <- prop.table(table(colData(sc_data_filtered)$cellType))
# Combine cells of the same cell type using dplyr
sc_data_tbl <- as.data.frame(t(log1p(counts(sc_data_filtered))))
sc_data_tbl$cell_type <- colData(sc_data_filtered)$cellType
bulk_data <- sc_data_tbl %>%
group_by(cell_type) %>%
summarize(across(everything(), ~ mean(exp(.)), .names = "mean_{.col}")) %>%
select(-cell_type) %>%
t() %>%
as.matrix()
# Read in single cell and bulk data
sc_data <- readRDS("EMTABsce_healthy.rds")
`%notin%` <- function(x, y) !(x %in% y)
cell_types_to_remove <- c("unclassified", "unclassified endocrine", "co-expression")
sc_data <- sc_data[, colData(sc_data)$cellType %notin% cell_types_to_remove]
bulk_counts <- read.csv("bulk_counts-MuSic-Xin.csv", row.names = 1)
RESULTS.sim.MuSic <- MuSiC::music_prop(
bulk.mtx = bulk_counts,
sc.sce = sc_data,
clusters = 'cellType',
samples = 'sampleID'
)
# Load in single cell data
sc_data <- readRDS("EMTABsce_healthy.rds")
`%notin%` <- function(x, y) !(x %in% y)
cell_types_to_remove <- c("unclassified", "unclassified endocrine", "co-expression")
sc_data_filtered <- sc_data[, colData(sc_data)$cellType %notin% cell_types_to_remove]
# Normalize the single-cell data using TPM normalization
sc_data_tpm <- counts(sc_data_filtered) %>%
t() %>%
as.data.frame() %>%
apply(2, function(x) exp(x - log(sum(exp(x))))) %>%
t() %>%
as.matrix()
# Estimate cell type proportions
cell_type <- colData(sc_data_filtered)$cellType
cell_type_prop <- prop.table(table(colData(sc_data_filtered)$cellType))
# Combine cells of the same cell type using dplyr
sc_data_tbl <- as.data.frame(t(log1p(counts(sc_data_filtered))))
sc_data_tbl$cell_type <- colData(sc_data_filtered)$cellType
bulk_data <- sc_data_tbl %>%
group_by(cell_type) %>%
summarize(across(everything(), ~ mean(exp(.)), .names = "mean_{.col}")) %>%
select(-cell_type) %>%
t() %>%
as.matrix()
annotation <- data.frame(ID = colnames(counts(sc_data_filtered)),
cell_type = colData(sc_data_filtered)$cellType)
# Create the dataset
ds <- SimBu::dataset(
annotation = annotation,
count_matrix = counts(sc_data_filtered),
tpm_matrix = sc_data_tpm,
filter_genes = TRUE
)
# Simulate pseudo bulk datasets
simulation <- SimBu::simulate_bulk(
data = ds,
scenario = "random",
scaling_factor = "NONE",
ncells = 100,
nsamples = 10,
BPPARAM = BiocParallel::MulticoreParam(workers = 4),
run_parallel = TRUE,
)
SimBu::plot_simulation(simulation = simulation)
plot_object <- SimBu::plot_simulation(simulation = simulation)
# Reformat and write true prop to csv
spread_data <- spread(data = plot_object$data, key = cell_type, value = fraction, fill = 0)
write.csv(spread_data, "true_prop.csv", row.names = TRUE)
# Write simulated bulk counts data to csv
bulk_counts <- SummarizedExperiment::assays(simulation$bulk)[["bulk_counts"]]
bulk_counts_matrix <- as.matrix(bulk_counts)
write.csv(bulk_counts_matrix, "bulk_counts.csv", row.names = TRUE)
# Write simultated bulk tpm normalized data to csv
bulk_tpm <- SummarizedExperiment::assays(simulation$bulk)[["bulk_tpm"]]
bulk_tpm_matrix <- as.matrix(bulk_tpm)
write.csv(bulk_tpm_matrix, "bulk_tpm.csv", row.names = TRUE)
# Run MuSiC
library("MuSiC")
library("Biobase")
RESULTS.sim.MuSic <- MuSiC::music_prop(
bulk.mtx = bulk_counts_matrix,
sc.sce = sc_data_filtered,
clusters = 'cellType',
samples = 'sampleID'
)
RESULTS.sim.MuSic <- MuSiC::music_prop(
bulk.mtx = bulk_counts,
sc.sce = sc_data_filtered,
clusters = 'cellType',
samples = 'sampleID'
)
RESULTS.sim.MuSic <- MuSiC::music_prop(
bulk.mtx = bulk_counts_matrix,
sc.sce = sc_data_filtered,
clusters = 'cellType',
samples = 'sampleID'
)
# Write simulated bulk counts data to csv
bulk_counts <- SummarizedExperiment::assays(simulation$bulk)[["bulk_counts"]]
saveRDS(bulk_counts, "bulk_counts.rds")
# Reformat and write true prop to csv
spread_data <- spread(data = plot_object$data, key = cell_type, value = fraction, fill = 0)
write.csv(spread_data, "true_prop.csv", row.names = TRUE)
writeRDS()
# Write simulated bulk counts data to csv
bulk_counts <- SummarizedExperiment::assays(simulation$bulk)[["bulk_counts"]]
bulk_counts_matrix <- as.matrix(bulk_counts)
write.csv(bulk_counts_matrix, "bulk_counts.csv", row.names = TRUE)
saveRDS(bulk_counts, "bulk_counts.rds")
# Write simultated bulk tpm normalized data to csv
bulk_tpm <- SummarizedExperiment::assays(simulation$bulk)[["bulk_tpm"]]
# Reformat and write true prop to csv
spread_data <- spread(data = plot_object$data, key = cell_type, value = fraction, fill = 0)
write.csv(spread_data, "true_prop.csv", row.names = TRUE)
writeRDS()
# Write simulated bulk counts data to csv
bulk_counts <- SummarizedExperiment::assays(simulation$bulk)[["bulk_counts"]]
bulk_counts_matrix <- as.matrix(bulk_counts)
write.csv(bulk_counts_matrix, "bulk_counts.csv", row.names = TRUE)
saveRDS(bulk_counts, "bulk_counts.rds")
# Write simultated bulk tpm normalized data to csv
bulk_tpm <- SummarizedExperiment::assays(simulation$bulk)[["bulk_tpm"]]
bulk_tpm_matrix <- as.matrix(bulk_tpm)
write.csv(bulk_tpm_matrix, "bulk_tpm.csv", row.names = TRUE)
saveRDS(bulk_tpm, "bulk_tpm.rds")
# Read in single cell and bulk data
sc_data <- readRDS("EMTABsce_healthy.rds")
`%notin%` <- function(x, y) !(x %in% y)
cell_types_to_remove <- c("unclassified", "unclassified endocrine", "co-expression")
sc_data <- sc_data[, colData(sc_data)$cellType %notin% cell_types_to_remove]
bulk_counts <- readRDS("bulk_counts.rds")
# Run MuSiC
library("MuSiC")
library("Biobase")
RESULTS.sim.MuSic <- MuSiC::music_prop(
bulk.mtx = bulk_counts,
sc.sce = sc_data,
clusters = 'cellType',
samples = 'sampleID'
)
RESULTS.sim.MuSic <- MuSiC::music_prop(
bulk.mtx = as.matrix(bulk_counts),
sc.sce = sc_data,
clusters = 'cellType',
samples = 'sampleID'
)
SimBu::plot_simulation(simulation = simulation)
# Reformat and write true prop to csv and rds
spread_data <- spread(data = plot_object$data, key = cell_type, value = fraction, fill = 0)
write.csv(spread_data, "true_prop.csv", row.names = TRUE)
writeRDS(spread_data, "true_prop.rds")
# Reformat and write true prop to csv and rds
spread_data <- spread(data = plot_object$data, key = cell_type, value = fraction, fill = 0)
write.csv(spread_data, "true_prop.csv", row.names = TRUE)
saveRDS(spread_data, "true_prop.rds")
# Read in single cell and bulk data
sc_data <- readRDS("EMTABsce_healthy.rds")
`%notin%` <- function(x, y) !(x %in% y)
cell_types_to_remove <- c("unclassified", "unclassified endocrine", "co-expression")
sc_data <- sc_data[, colData(sc_data)$cellType %notin% cell_types_to_remove]
bulk_counts <- readRDS("bulk_counts.rds")
# Run MuSiC
library("MuSiC")
library("Biobase")
RESULTS.sim.MuSic <- MuSiC::music_prop(
bulk.mtx = as.matrix(bulk_counts),
sc.sce = sc_data,
clusters = 'cellType',
samples = 'sampleID'
)
bulk_counts_matrix <- data.matrix(bulk_counts)
feature_names <- rownames(bulk_counts_matrix)
col_names <- colnames(bulk_counts_matrix)
bulk.eset <- ExpressionSet(assayData = bulk_counts_matrix, phenoData = AnnotatedDataFrame(data.frame(row.names = col_names)))
featureNames(bulk.eset) <- feature_names
sc_count_matrix <- assays(sc_data)$counts
metadata <- data.frame(sampleID = colnames(sc_count_matrix), celltype = colData(sc_data)$cellType)
feature_names <- rownames(sc_count_matrix)
col_names <- metadata$sampleID
pheno_data <- AnnotatedDataFrame(data.frame(row.names = col_names, celltype = colData(sc_data)$cellType))
sc.eset <- ExpressionSet(assayData = sc_count_matrix, phenoData = pheno_data)
featureNames(sc.eset) <- feature_names
RESULTS.BisqueRNA <- BisqueRNA::ReferenceBasedDecomposition(bulk.eset, sc.eset, markers=NULL, use.overlap=FALSE)$bulk.props
library(Biobase)
library(SingleCellExperiment)
bulk.eset <- as(bulk_counts, "ExpressionSet")
sc_pDdata <- as.data.frame(colData(sc_data))
sc.est <- Biobase::ExpressionSet(assayData = assay(sc_data)$counts ,phenoData = sc_pDdata)
sc.est <- Biobase::ExpressionSet(assayData = as.matrix(exprs(sc_data)) ,phenoData = sc_pDdata)
bulk.eset <- Biobase::ExpressionSet(assayData = as.matrix(bulk_counts))
sc_pDdata <- as.data.frame(colData(sc_data))
sc.est <- Biobase::ExpressionSet(assayData = as.matrix(exprs(sc_data)) ,phenoData = sc_pDdata)
# Read in single cell and bulk data
sc_data <- readRDS("EMTABsce_healthy.rds")
`%notin%` <- function(x, y) !(x %in% y)
cell_types_to_remove <- c("unclassified", "unclassified endocrine", "co-expression")
sc_data <- sc_data[, colData(sc_data)$cellType %notin% cell_types_to_remove]
bulk_counts <- readRDS("bulk_counts.rds")
# Run MuSiC
library("MuSiC")
bulk.eset <- Biobase::ExpressionSet(assayData = as.matrix(bulk_counts))
sc_pDdata <- as.data.frame(colData(sc_data))
dim(as.matrix(exprs(sc_data))
)
exprs(sc_data)
assay(sc_data)
sc.est <- Biobase::ExpressionSet(assayData = as.matrix(assay(sc_data)) ,phenoData = sc_pDdata)
sc.est <- Biobase::ExpressionSet(assayData = as.matrix(assay(sc_data)), phenoData = Biobase::AnnotatedDataFrame(sc_pDdata))
sc.est
RESULTS.BisqueRNA <- BisqueRNA::ReferenceBasedDecomposition(bulk.eset, sc.eset, markers=NULL, use.overlap=FALSE)$bulk.props
colnames(colData(sc.est))
varLabels(sc.est)
# deConvSeq
singlecelldata = sc.eset
celltypes.sc = as.character(phenoDataC$cellType) #To avoid "Design matrix not of full rank" when removing 1 CT
celltypes.sc = as.character(sc_pDdata$cellType) #To avoid "Design matrix not of full rank" when removing 1 CT
tissuedata = bulk.eset
design.singlecell = model.matrix(~ -1 + as.factor(celltypes.sc))
colnames(design.singlecell) = levels(as.factor(celltypes.sc))
rownames(design.singlecell) = colnames(singlecelldata)
dge.singlecell = deconvSeq::getdge(singlecelldata,design.singlecell, ncpm.min = 1, nsamp.min = 4, method = "bin.loess")
b0.singlecell = deconvSeq::getb0.rnaseq(dge.singlecell, design.singlecell, ncpm.min =1, nsamp.min = 4)
RESULTS.sim.MuSic
RESULTS.sim.MuSic <- MuSiC::music_prop(
bulk.mtx = as.matrix(bulk_counts),
sc.sce = sc_data,
clusters = 'cellType',
samples = 'sampleID'
)$Est.prop.weighted
RESULTS.sim.MuSic
sc_data
colData(sc_data)
unique(colData(sc_data)$cellType)
RESULTS.sim.MuSic <- MuSiC::music_prop(
bulk.mtx = as.matrix(bulk_counts),
sc.sce = sc_data,
clusters = 'cellType',
samples = 'sampleID',
clusters = c("delta", "alpha","gamma","ductal","acinar",
"beta","MHC class II","PSC", "endothelial","epsilon","mast"))$Est.prop.weighted
RESULTS.sim.MuSic <- MuSiC::music_prop(
bulk.mtx = as.matrix(bulk_counts),
sc.sce = sc_data,
clusters = 'cellType',
samples = 'sampleID',
select.ct = c("delta", "alpha","gamma","ductal","acinar",
"beta","MHC class II","PSC", "endothelial","epsilon","mast"))$Est.prop.weighted
RESULTS.sim.MuSic
colnames(RESULTS.sim.MuSic)
RESULTS.sim.MuSic <- (MuSiC::music_prop(bulk.eset = as.matrix(bulk_counts), sc.eset = sc_data, clusters = 'cellType',
markers = NULL, normalize = FALSE, samples = 'SubjectName',
verbose = F)$Est.prop.weighted)
RESULTS.sim.MuSic <- (MuSiC::music_prop(bulk.mtx = as.matrix(bulk_counts), sc.eset = sc_data, clusters = 'cellType',
markers = NULL, normalize = FALSE, samples = 'SubjectName',
verbose = F)$Est.prop.weighted)
RESULTS.sim.MuSic <- (MuSiC::music_prop(bulk.mtx = as.matrix(bulk_counts), sc.esce = sc_data, clusters = 'cellType',
markers = NULL, normalize = FALSE, samples = 'SubjectName',
verbose = F)$Est.prop.weighted)
sc.sce
RESULTS.sim.MuSic <- (MuSiC::music_prop(bulk.mtx = as.matrix(bulk_counts), sc.sce = sc_data, clusters = 'cellType',
markers = NULL, normalize = FALSE, samples = 'SubjectName',
verbose = F)$Est.prop.weighted)
RESULTS.sim.MuSic
# Run MuSiC
require(MuSiC)
RESULTS.sim.MuSic <- MuSiC::music_prop(
bulk.mtx = as.matrix(bulk_counts),
sc.sce = sc_data,
clusters = 'cellType',
samples = 'sampleID',
select.ct = c("delta", "alpha","gamma","ductal","acinar",
"beta","MHC class II","PSC", "endothelial","epsilon","mast"))$Est.prop.weighted
RESULTS.sim.MuSic <- MuSiC::music_prop(
bulk.mtx = as.matrix(bulk_counts),
sc.sce = sc_data,
clusters = 'cellType',
samples = 'sampleID',
select.ct = c("delta", "alpha","gamma","ductal","acinar",
"beta","MHC class II","PSC", "endothelial","epsilon","mast"),
normalize = FALSE)$Est.prop.weighted
RESULTS.sim.MuSic
RESULTS.sim.MuSic <- MuSiC::music_prop(
bulk.mtx = as.matrix(bulk_counts),
sc.sce = sc_data,
clusters = 'cellType',
samples = 'sampleID',
select.ct = c("delta", "alpha","gamma","ductal","acinar",
"beta","MHC class II","PSC", "endothelial","epsilon","mast"),
normalize = FALSE,
markers = NULL)$Est.prop.weighted
RESULTS.sim.MuSic <- MuSiC::music_prop(
bulk.mtx = as.matrix(bulk_counts),
sc.sce = sc_data,
clusters = 'cellType',
samples = 'sampleID',
select.ct = c("delta", "alpha","gamma","ductal","acinar",
"beta","MHC class II","PSC", "endothelial","epsilon","mast"),
normalize = FALSE,
markers = NULL)$Est.prop.weighted
RESULTS.sim.MuSic
RESULTS.sim.MuSic <- MuSiC::music_prop(
bulk.mtx = as.matrix(bulk_counts),
sc.sce = sc_data,
clusters = 'cellType',
samples = 'sampleID',
normalize = FALSE,
markers = NULL,
clusters = 'cellType')$Est.prop.weighted
RESULTS.sim.MuSic <- MuSiC::music_prop(
bulk.mtx = as.matrix(bulk_counts),
sc.sce = sc_data,
clusters = 'cellType',
samples = 'sampleID',
normalize = FALSE,
markers = NULL,
clusters = 'cellType')$Est.prop.weighted
RESULTS.sim.MuSic <- MuSiC::music_prop(
bulk.mtx = as.matrix(bulk_counts),
sc.sce = sc_data,
clusters = 'cellType',
samples = 'sampleID',
normalize = FALSE,
markers = NULL,
samples)$Est.prop.weighted
#select.ct = c("delta", "alpha","gamma","ductal","acinar",
#             "beta","MHC class II","PSC", "endothelial","epsilon","mast"),
# Bisque
require(BisqueRNA)
RESULTS.sim.MuSic <- MuSiC::music_prop(
bulk.mtx = as.matrix(bulk_counts),
sc.sce = sc_data,
clusters = 'cellType',
samples = 'sampleID',
normalize = FALSE,
markers = NULL,
samples = "SubjectName")$Est.prop.weighted
RESULTS.sim.MuSic <- MuSiC::music_prop(
bulk.mtx = as.matrix(bulk_counts),
sc.sce = sc_data,
clusters = 'cellType',
samples = 'sampleID',
normalize = FALSE,
markers = NULL)$Est.prop.weighted
#select.ct = c("delta", "alpha","gamma","ductal","acinar",
#             "beta","MHC class II","PSC", "endothelial","epsilon","mast"),
# Bisque
require(BisqueRNA)
RESULTS.sim.MuSic
